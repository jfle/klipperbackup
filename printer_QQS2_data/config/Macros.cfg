#  __  __                          
# |  \/  |                         
# | \  / | __ _  ___ _ __ ___  ___ 
# | |\/| |/ _` |/ __| '__/ _ \/ __|
# | |  | | (_| | (__| | | (_) \__ \
# |_|  |_|\__,_|\___|_|  \___/|___/
#
# Macros Configurations - Flsun Super Racer           
#
# Guislain Cyril
[virtual_sdcard]
path: /home/pi/printer_QQS2_data/gcodes/
on_error_gcode: CANCEL_PRINT

[save_variables]
filename: /home/pi/printer_QQS2_data/config/variables.cfg

############################################################################################################################################################
[gcode_macro POWER_ON_PRINTER]
gcode:
   {action_call_remote_method("set_device_power",
                             device="qqs2",
                             state="on")}
############################################################################################################################################################
[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="qqs2",
                             state="off")}
###########################################################################################################################################################
[gcode_macro DAMPING]
gcode:
    {% set RATIO = params.RATIO|default(0.1) %}
    SET_INPUT_SHAPER DAMPING_RATIO_X={RATIO}
    SET_INPUT_SHAPER DAMPING_RATIO_Y={RATIO}
###########################################################################################################################################################
[gcode_macro M0]
gcode:
  PAUSE
###########################################################################################################################################################

[gcode_macro START_PRINT]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
  {% set MATERIAL = params.MATERIAL|default("PLA") %}
  SET_MATERIAL MATERIAL={MATERIAL}  ; Set material type
  G21
  G90
  M82
  G28
  G0 X-119 Y0 Z1
  {% if printer.extruder.target != 0 %}
  M104 S{EXTRUDER_TEMP}
  NEOPIXEL_DISPLAY LED="my_led" TYPE=extruder_temp MODE=glow
  {% else %}
  M104 S150
  {% endif %}
  M140 S{BED_TEMP}
  NEOPIXEL_DISPLAY LED="my_led" TYPE=bed_temp MODE=progress 
  {% if printer.toolhead.homed_axes != "xyz" %}
  {% endif %}
  M190 S{BED_TEMP}
  M109 S{EXTRUDER_TEMP}
  G1 Z1 F2500
  G1 X-120 Y0 Z0.4
  G92 E0
  G3 X0 Y-120 I120 J1 Z0.3 E40 F400
  G92 E0
  G1 E-0.3 F1800
  NEOPIXEL_DISPLAY LED="my_led" TYPE=print_percent MODE=progress  
###########################################################################################################################################################
[gcode_macro END_PRINT]
description: End G-Code
gcode:
  M106 S0
  M104 S0
  M140 S0
  G92 E0
  G91
  G1 E-1 F300
  G1 Z+5 F6000
  G28
  G90
  POWER_OFF_PRINTER
###########################################################################################################################################################  
[gcode_macro M600]
description: Filament change
variable_hotend_temp: 0
variable_m600_enabled: 0
gcode:
  ##### set defaults #####
  {% set x = params.X|default(0) %}
  {% set y = params.Y|default(0) %}
  {% set z = params.Z|default(0)|float %}
  {% set e = params.E|default(1) %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% set lift_z = z|abs %}
  {% if act_z < (max_z - lift_z) %}
  {% set z_safe = lift_z %}
  {% else %}
  {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=M600_state
  SET_IDLE_TIMEOUT TIMEOUT=86400
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=m600_enabled VALUE=1
  SET_GCODE_VARIABLE MACRO=M600 VARIABLE=hotend_temp VALUE={printer.extruder.target}
  RESPOND MSG="Pausing..."
  PAUSE
  G91
  G1 E-{e} F2100
  G1 Z{z_safe}
  G90
  G1 X{x} Y{y} F2500
  RESPOND MSG="Unloading filament..."
  G91
  G0 E-20 F800
  G0 E-800 F800
  M400
  RESPOND MSG="Heating stopped!"
  M109 S0
  M106 S0
  RESTORE_GCODE_STATE NAME=M600_state
##########################################################################################################################################################
#[gcode_macro UNLOAD_FILAMENT]
#description: Filament unloading
#3gcode:
#  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
#  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
#  {% else %}
#  SAVE_GCODE_STATE NAME=unload_state
#  {% if printer.extruder.temperature < 200 %}
#  RESPOND MSG="Heating..."
#  M109 S200
#  {% endif %}
#  RESPOND MSG="Unloading filament..."
#  G91
#  G0 E2 F400
#  G0 E-20 F800
#  G0 E-800 F800
#  RESTORE_GCODE_STATE NAME=unload_state
#  {% endif %}
###########################################################################################################################################################
#[gcode_macro LOAD_FILAMENT]
#description: Filament loading
#gcode:
#  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
#  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
#  {% else %}
#  SAVE_GCODE_STATE NAME=load_state
#  {% if printer.extruder.temperature < 200 %}
#  RESPOND MSG="Heating..."
#  M109 S200
#  {% endif %}
#  RESPOND MSG="Loading filament..."
#  G91
#  G0 E700 F800
#  G0 E50 F300
#  M400
#  RESTORE_GCODE_STATE NAME=load_state
#  {% endif %}
###########################################################################################################################################################
[gcode_macro ENDSTOPS_CALIBRATION]
description: Start Endstops Phase Calibration
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  G91
  G1 Z-50 F1500
  G90
  G28
  G91
  G1 Z-50 F1500
  G90
  G28
  G91
  G1 Z-50 F1500
  G90
  G28
  G91
  G1 Z-50 F1500
  G90
  G28
  G91
  G1 Z-50 F1500
  G90
  G28
  ENDSTOP_PHASE_CALIBRATE stepper=stepper_a
  ENDSTOP_PHASE_CALIBRATE stepper=stepper_b
  ENDSTOP_PHASE_CALIBRATE stepper=stepper_c
  {% endif %}
###########################################################################################################################################################
[gcode_macro DELTA_CALIBRATION]
description: Delta Calibration
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  SET_GCODE_OFFSET Z=0
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  DELTA_CALIBRATE
  G1 X0 Y0 Z35 F2500
  G28
  {% endif %}
###########################################################################################################################################################
[gcode_macro BED_LEVELING]
description: Start Bed Leveling
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  G1 X0 Y0 Z50 F2500
  BED_MESH_CALIBRATE
  G1 X0 Y0 Z50 F2500
  G28
  {% endif %}
###########################################################################################################################################################
[gcode_macro PID_BED_65]
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  M106
  G1 Z20 F1500
  PID_CALIBRATE HEATER=heater_bed TARGET={params.TEMP|default(65)}
  G28
  SAVE_CONFIG
  {% endif %}
###########################################################################################################################################################
[gcode_macro PID_HOTEND_220]
description: Hotend PID
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  M106
  G1 Z5 F1500
  PID_CALIBRATE HEATER=extruder TARGET={params.TEMP|default(220)}
  G28
  SAVE_CONFIG
  {% endif %}
###########################################################################################################################################################
[gcode_macro ADXL_TEST]
description: ADXL Test
gcode:
  ACCELEROMETER_QUERY
###########################################################################################################################################################
[gcode_macro ADXL_NOISE]
description: Measure Accelerometer Noise
gcode:
  MEASURE_AXES_NOISE
###########################################################################################################################################################
[gcode_macro ADXL_AXE_X]
description: Measure X axis resonances
gcode:
  SHAPER_CALIBRATE AXIS=X
###########################################################################################################################################################
[gcode_macro ADXL_AXE_Y]
description: Measure Y axis resonances
gcode:
  SHAPER_CALIBRATE AXIS=Y
###########################################################################################################################################################
[gcode_macro NOISE_TEST]
description: Move to Z10, disable steppers, measure accelerometer noise, then re-enable steppers
gcode:
    G1 Z10 F6000               ; move hotend ~10â€¯mm above bed
    M18                        ; disable all steppers
    ADXL_NOISE                 ; run the ADXL noise analysis
    M17                        ; re-enable all steppers
  
###########################################################################################################################################################
[gcode_macro MOVE_TO_Z0]
description: Move to Z=0
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  {% endif %}
  G1 Z0 F2500
  {% endif %}
###########################################################################################################################################################
[gcode_macro Z_UP]
description: Raise Nozzle
gcode:
  SET_GCODE_OFFSET Z_ADJUST=0.025 MOVE=1
###########################################################################################################################################################
[gcode_macro Z_DOWN]
description: Lower Nozzle
gcode:
  SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1
###########################################################################################################################################################
[gcode_macro PRESSURE_ADVANCE]
description: Pressure Advance
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  SET_PRESSURE_ADVANCE ADVANCE=0   
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
  TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020
  {% endif %}
###########################################################################################################################################################
[gcode_macro SET_GCODE_OFFSET]
description: Save Z-Offset value
rename_existing: _SET_GCODE_OFFSET
gcode:
  {% if printer.save_variables.variables.gcode_offsets %}
  {% set offsets = printer.save_variables.variables.gcode_offsets %}
  {% else %}
  {% set offsets = {'x': None,'y': None,'z': None} %}
  {% endif %}
  {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
  _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
  {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
  {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
  {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
  {%if 'Z_ADJUST' in params %}
  {%if ns.offsets.z == None %}{% set null = ns.offsets.update({'z': 0}) %}{% endif %}
  {% set null = ns.offsets.update({'z': (ns.offsets.z | float) + (params.Z_ADJUST | float)}) %}
  {% endif %}
  SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"
###########################################################################################################################################################
[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:
  {% if printer.save_variables.variables.gcode_offsets %}
  {% set offsets = printer.save_variables.variables.gcode_offsets %}
  _SET_GCODE_OFFSET {% for axis, offset in offsets.items() if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}
  { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
  {% endif %}
###########################################################################################################################################################
[gcode_macro TMC]
gcode:
  DUMP_TMC STEPPER=stepper_a
  DUMP_TMC STEPPER=stepper_b
  DUMP_TMC STEPPER=stepper_c
  DUMP_TMC STEPPER=extruder
###########################################################################################################################################################  

########################################################################################################################################################### 
[gcode_macro TEST_SPEED_DELTA]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED_DELTA SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set radius_bound = printer.toolhead.axis_maximum.x - bound %}
        {% set xy_max_pos = ((radius_bound ** 2) / 2) ** 0.5 %}
        {% set x_min = xy_max_pos * -1 %}
        {% set x_max = xy_max_pos %}
        {% set y_min = xy_max_pos * -1 %}
        {% set y_max = xy_max_pos %}

    # Small pattern at center
        # Set small pattern box around center point
        {% set x_center_min = smallpatternsize / 2 * -1 %}
        {% set x_center_max = smallpatternsize / 2 %}
        {% set y_center_min = smallpatternsize / 2 * -1 %}
        {% set y_center_max = smallpatternsize / 2 %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED_DELTA
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED_DELTA: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
    M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
    G28
    G90
    G4 P1000 
    GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{printer.toolhead.axis_maximum.z/2} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals 
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}
    # Re-home and get position again for comparison:
    M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
    G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
    G4 P1000 
    GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED_DELTA
    